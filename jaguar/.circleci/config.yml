version: 2

# The following stanza defines a map named defaults with a variable that may be
# inserted using the YAML merge (<<: *) key later in the file to save some
# typing. See http://yaml.org/type/merge.html for details.
defaults: &defaults
  environment:
    DOCKER_REPOSITORY: "cleanpass/api"
    DOCKER_NAMESPACE: "cleanpass"
    DOCKER_NAME: "cleanpass"
  docker:
    - image: circleci/python:3.6.4

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      - restore_cache: # ensure this step occurs *before* installing dependencies
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            sudo pip install pipenv
            pipenv install
      - save_cache:
          key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.6/site-packages"

  # TODO: add unit test

  newman-collection-run:
    docker:
      # The primary container is an instance of the first image listed. The job's commands run in this container.
      - image: "postman/newman"
      - image: "cleanpass/api:${CIRCLE_BRANCH}"
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        # those env vars can be public
        environment:
          MONGODB_HOST: localhost
          MONGODB_PORT: "28018"
          MONGODB_USER: cleanuser
          MONGODB_PWD: cleanpwd
          MONGODB_DB: cleandb
          SECRET_KEY: 999adsdsdj!c?ETt@52y5-d@v*n_$kPFO8IyFxN-tWlTv8@cgE?f
          DJANGO_SETTINGS_MODULE: cleanpassapi.settings.dev
          ENV: development
          ALLOWED_HOSTS: localhost
          AUTH0_MANAGEMENT_GRANT_TYPE: client_credentials
          JWT_AUDIENCE: "https://cleanpass-dev/api/v1/"
          JWT_ISSUER: "https://cleanpass-dev.auth0.com/"
          # TODO: Circleci has some problems to pass env vars to the container so we have to
          # put those variables here but we have to figure out how pass it through CI environment
          # this solution sucks ðŸ¤®
          # ttps://discuss.circleci.com/t/passing-environment-variables-to-docker-containers/34662
          AUTH0_MANAGEMENT_CLIENT_ID: "QbeTsUCTyJijUq3gxKrIB9kbdRsv1668"
          AUTH0_MANAGEMENT_CLIENT_SECRET: "3ADS8oXMWM3eg_OkAfqwEKfEpktq-jRVYrtbRJdCdhabBO0EwNKOg1NlkGixzzgU"
          AUTH0_MANAGEMENT_AUDIENCE: "https://cleanpass-dev.auth0.com/api/v2/"
          AUTH0_DATABASE: "Cleanpass-Auth0-Database-Dev"
        # Integration tests need MongoDB server running and accessible on port 28018
      - image: circleci/mongo:4.2.0
        command: mongod --port 28018 --oplogSize 128 --storageEngine=wiredTiger --wiredTigerCacheSizeGB 1.5 --serviceExecutor adaptive
    steps:
      - setup_remote_docker
      - run:
          name: Newman Test
          # fetch collection from remote
          command: newman run "${URL_COLLECTIONS_POSTMAN}" -e "${URL_ENVIRONMENT_POSTMAN}" --reporters="junit,cli" --reporter-junit-export="test-results/postman/tests.report.xml"
      - store_test_results:
          path: ./test-results
      - store_artifacts:
          path: ./test-results

  dockerfile-lint:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Lint Dockerfiles
          command: ./bin/docker-lint-files.sh

  docker-build-push:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and push production Docker image
          command: ./bin/docker-build-tag-push.sh . ${DOCKER_REPOSITORY}

  deploy:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: installing curl
          command: apk --no-cache add curl
      - run:
          name: Pushing service
          # TODO: manage the response - it may be cancelled
          command: |
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              curl -X POST $URL_WEB_HOOK_PRODUCTION
            else
              curl -X POST $URL_WEB_HOOK_STAGING
            fi

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - dockerfile-lint:
          requires:
            - build
      - docker-build-push:
          requires:
            - dockerfile-lint
          filters:
            branches:
              only:
                - staging
                - master
                - infrastructure
            tags:
              only: /^v.*/
      - newman-collection-run:
          requires:
            - docker-build-push
          filters:
            branches:
              only:
                - staging
                - master
                - infrastructure
            tags:
              only: /^v.*/
      - deploy:
          requires:
            - newman-collection-run
          filters:
            branches:
              only:
                - staging
                - master
                - infrastructure
            tags:
              only: /^v.*/
